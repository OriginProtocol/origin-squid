type Address @entity {
  id: ID! @index
  isContract: Boolean!
  rebasingOption: String! # OptIn, OptOut
  balance: Float!
  earned: Float!
  credits: BigInt!
  lastUpdated: DateTime!
  history: [History!]! @derivedFrom(field: "address")

  ogvVotes: BigInt!
}

type History @entity {
  id: ID!
  address: Address! @index
  value: Float!
  balance: Float!
  timestamp: DateTime!
  blockNumber: Int! @index
  txHash: String! @index
  type: String! # Swap, Yield
}

type Rebase @entity {
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  txHash: String! @index
  totalSupply: BigInt!
  rebasingCredits: BigInt!
  rebasingCreditsPerToken: BigInt!
  apy: APY!
}

type APY @entity {
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  txHash: String! @index
  apr: Float!
  apy: Float!
  apy7DayAvg: Float!
  apy14DayAvg: Float!
  apy30DayAvg: Float!
  rebasingCreditsPerToken: BigInt!
}

type ProposalTxLog @entity {
  id: ID!
  hash: String!
  event: String!
  createdAt: DateTime!
  proposal: Proposal! @index
}

type Proposal @entity {
  id: ID! @index
  description: String
  proposer: Address!
  createdAt: DateTime!
  status: Int!
  logs: [ProposalTxLog]! @derivedFrom(field: "proposal")
}

type OGVLockupTxLog @entity {
  id: ID!
  hash: String!
  event: String!
  createdAt: DateTime!
  ogvLockup: OGVLockup!
}

type OGVLockup @entity {
  id: ID!
  lockupId: Int! @index
  user: Address! @index
  logs: [OGVLockupTxLog]! @derivedFrom(field: "ogvLockup")
  amount: BigInt!
  end: DateTime!
  createdAt: DateTime!
  active: Boolean
}

type OGVProposalVoter @entity {
  id: ID!
  proposal: Proposal!
  voter: Address!
}
