# GENERATED, DO NOT MODIFY

# State

type ESToken @entity {
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  circulating: BigInt!
  staked: BigInt!
  total: BigInt!
}

type ESAccount @entity {
  id: ID! # `chainId:address:account`
  chainId: Int! @index
  address: String! @index
  account: String! @index
  assetBalance: BigInt!
  stakedBalance: BigInt!
  balance: BigInt!
  votingPower: BigInt!
  delegateTo: ESAccount
  delegatesFrom: [ESAccount]! @derivedFrom(field: "delegateTo")
}

type ESYield @entity {
  id: ID!
  chainId: Int! @index
  address: String! @index
  timestamp: DateTime! @index
  blockNumber: Int! @index
  assetBalance: BigInt!
  rewardsPerSecond: BigInt!
  apr: Float!
  apy: Float!
}

type ESLockup @entity  {
  id: ID! # `chainId:address:account:lockupId` or `lockupId`
  chainId: Int! @index
  address: String! @index
  account: String! @index
  lockupId: BigInt! @index
  timestamp: DateTime!
  txHash: String! @index
  lastUpdated: DateTime!
  amount: BigInt!
  end: DateTime!
  points: BigInt!
  withdrawAmount: BigInt!
  penalty: BigInt!
  state: ESLockupState
  events: [ESLockupEvent]! @derivedFrom(field: "lockup")
}

enum ESLockupState {
  Open
  Closed
}

enum ESLockupEventType {
  Staked
  Unstaked
  Extended
}

type ESLockupEvent @entity {
  id: ID!
  chainId: Int! @index
  address: String! @index
  timestamp: DateTime! @index
  blockNumber: Int! @index
  txHash: String! @index
  event: ESLockupEventType!
  lockup: ESLockup!
}

# Events
type ESDelegateChanged @entity  {
  id: ID! # `chainId:logId`
  chainId: Int! @index
  address: String! @index
  timestamp: DateTime! @index
  blockNumber: Int! @index
  txHash: String! @index
  delegator: String! @index
  fromDelegate: String!
  toDelegate: String!
}

type ESDelegateVotesChanged @entity  {
  id: ID! # `chainId:logId`
  chainId: Int! @index
  address: String! @index
  timestamp: DateTime! @index
  blockNumber: Int! @index
  txHash: String! @index
  delegate: String! @index
  previousBalance: BigInt!
  newBalance: BigInt!
}

type ESPenalty @entity  {
  id: ID! # `chainId:logId`
  chainId: Int! @index
  address: String! @index
  timestamp: DateTime! @index
  blockNumber: Int! @index
  txHash: String! @index
  account: String! @index
  amount: BigInt!
}

type ESReward @entity  {
  id: ID! # `chainId:logId`
  chainId: Int! @index
  address: String! @index
  timestamp: DateTime! @index
  blockNumber: Int! @index
  txHash: String! @index
  account: String! @index
  amount: BigInt!
}

type ESStake @entity  {
  id: ID! # `chainId:logId`
  chainId: Int! @index
  address: String! @index
  timestamp: DateTime! @index
  blockNumber: Int! @index
  txHash: String! @index
  account: String! @index
  lockupId: BigInt! @index
  amount: BigInt!
  end: BigInt!
  points: BigInt!
}

type ESUnstake @entity  {
  id: ID! # `chainId:logId`
  chainId: Int! @index
  address: String! @index
  timestamp: DateTime! @index
  blockNumber: Int! @index
  txHash: String! @index
  account: String! @index
  lockupId: BigInt! @index
  amount: BigInt!
  end: BigInt!
  points: BigInt!
}
type FRRSRewardCollected @entity {
  id: ID!
  chainId: Int! @index
  address: String! @index
  timestamp: DateTime! @index
  blockNumber: Int! @index
  txHash: String! @index
  amountCollected: BigInt!
}
type FRRSRewardsPerSecondChanged @entity {
  id: ID!
  chainId: Int! @index
  address: String! @index
  timestamp: DateTime! @index
  blockNumber: Int! @index
  txHash: String! @index
  newRPS: BigInt!
  oldRPS: BigInt!
}
type FRRSRewardsTargetChange @entity {
  id: ID!
  chainId: Int! @index
  address: String! @index
  timestamp: DateTime! @index
  blockNumber: Int! @index
  txHash: String! @index
  target: String!
  previousTarget: String!
}
type FRRSStrategistUpdated @entity {
  id: ID!
  chainId: Int! @index
  address: String! @index
  timestamp: DateTime! @index
  blockNumber: Int! @index
  txHash: String! @index
  strategistAddress: String!
}type ProcessingStatus @entity {
  id: ID!
  timestamp: DateTime!
  blockNumber: Int!
}

"""
Any entity which has a price associated with it should have that price go in here.
Prices can change very frequently and we don't want those changes on the same track
as values which change less frequently.
"""
type ExchangeRate @entity {
  """
  Format: 'blockNumber:pair' ex '123456789:ETH_USD'
  """
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  pair: String!
  base: String!
  quote: String!
  rate: BigInt!
}

enum RebasingOption {
  OptIn
  OptOut
}

enum HistoryType {
  Sent
  Received
  Yield
}

type StrategyBalance @entity {
  """
  Format: 'strategy:asset:blockNumber'
  """
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  strategy: String!
  asset: String!
  balance: BigInt!
}

type StrategyYield @entity {
  """
  Format: 'strategy:asset:blockNumber'
  """
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  strategy: String!
  asset: String!
  balance: BigInt!
  balanceWeight: Float!
  earnings: BigInt!
  earningsChange: BigInt!
}

type StrategyDailyYield @entity {
  """
  Format: 'strategy:asset:blockNumber'
  """
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  strategy: String!
  asset: String!
  balance: BigInt!
  balanceWeight: Float!
  earnings: BigInt!
  earningsChange: BigInt!
  apr: Float!
  apy: Float!
}

type NativeBalance @entity {
  """
  Format: 'account:blockNumber'
  """
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  account: String!
  balance: BigInt!
}

type ERC20 @entity {
  """
  Format: 'address'
  """
  id: ID!
  chainId: Int! @index
  address: String! @index
  name: String!
  decimals: Int!
  symbol: String!
}

type ERC20Holder @entity {
  """
  Format: 'address:account'
  """
  id: ID!
  chainId: Int! @index
  address: String!
  account: String!
  balance: BigInt!
}

type ERC20State @entity {
  """
  Format: 'address:blockNumber'
  """
  id: ID!
  chainId: Int! @index
  timestamp: DateTime! @index
  blockNumber: Int! @index
  address: String!
  totalSupply: BigInt!
  holderCount: Int!
}

type ERC20Balance @entity {
  """
  Format: 'address:account:blockNumber'
  """
  id: ID!
  chainId: Int! @index
  timestamp: DateTime! @index
  blockNumber: Int! @index
  address: String!
  account: String!
  balance: BigInt!
}

type ERC20Transfer @entity {
  id: ID!
  chainId: Int! @index
  txHash: String!
  blockNumber: Int!
  timestamp: DateTime!
  address: String! @index
  from: String! @index
  to: String! @index
  value: BigInt!
}

type CurvePool @entity {
  id: ID!
  address: String! @index
  name: String!
  tokenCount: Int!
  token0: String!
  token1: String!
  token2: String
}

type CurvePoolBalance @entity {
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  address: String!
  balance0: BigInt!
  balance1: BigInt!
  balance2: BigInt!
}

type CurvePoolRate @entity {
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  address: String!
  name: String!
  rate: BigInt!
}

type BalancerPool @entity {
  id: ID!
  address: String! @index
  name: String!
  tokenCount: Int!
  token0: String!
  token1: String!
  token2: String
  token3: String
}

type BalancerPoolBalance @entity {
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  address: String!
  balance0: BigInt!
  balance1: BigInt!
  balance2: BigInt!
  balance3: BigInt!
}

type BalancerPoolRate @entity {
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  address: String!
  rate0: BigInt!
  rate1: BigInt!
  rate2: BigInt!
  rate3: BigInt!
}

type MaverickPool @entity {
  id: ID!
  address: String! @index
  name: String!
  tokenA: String!
  tokenB: String!
}

type MaverickPoolBalance @entity {
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  address: String!
  binBalanceA: BigInt!
  binBalanceB: BigInt!
}

enum LiquiditySourceType {
  CurvePool
  BalancerPool
  MaverickPool
  UniswapPool
  Aave
  Compound
}

type LiquiditySource @entity {
  id: ID!
  address: String!
  type: LiquiditySourceType!
  token: String!
}

type LiquidityDailyBalance @entity {
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  address: String!
  token: String!
  balance: BigInt!
}

type BridgeTransfer @entity {
  id: ID! # chain + log id
  timestamp: DateTime! @index
  blockNumber: Int! @index
  txHashIn: String!
  txHashOut: String # Initially null
  messageId: String! @index
  bridge: String! @index
  transactor: String! @index
  sender: String! @index
  receiver: String! @index
  chainIn: Int! @index
  chainOut: Int!
  tokenIn: String!
  tokenOut: String!
  amountIn: BigInt!
  amountOut: BigInt!
  state: Int!
}

type BridgeTransferState @entity {
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  txHash: String! @index
  state: Int!
}
enum GovernanceProposalState {
  Pending
  Active
  Canceled
  Defeated
  Succeeded
  Queued
  Expired
  Executed
}

enum GovernanceProposalEventType {
  Created
  Queued
  Canceled
  Extended
  Executed
}

enum GovernanceVoteType {
  Against
  For
  Abstain
}

type GovernanceProposalEvent @entity {
  id: ID!
  txHash: String! @index
  event: GovernanceProposalEventType!
  timestamp: DateTime!
  proposal: GovernanceProposal! @index
}

type GovernanceProposal @entity {
  id: ID! @index
  chainId: Int! @index
  address: String! @index
  proposalId: BigInt!
  description: String
  proposer: String!
  timestamp: DateTime!
  txHash: String! @index
  startBlock: BigInt!
  endBlock: BigInt!
  targets: [String]!
  values: [String]!
  signatures: [String]!
  calldatas: [String]!
  lastUpdated: DateTime!
  status: GovernanceProposalState!
  events: [GovernanceProposalEvent]! @derivedFrom(field: "proposal")
  quorum: BigInt!
  choices: [String]!
  scores: [String]!
}

type GovernanceProposalVote @entity {
  id: ID!
  chainId: Int!
  address: String!
  proposal: GovernanceProposal! @index
  voter: String! @index
  weight: BigInt!
  type: GovernanceVoteType!
  txHash: String!
  timestamp: DateTime!
}# OETH Vault: 0x39254033945AA2E4809Cc2977E7087BEE48bd7Ab
"""
The Vault entity tracks the OETH vault balance over time.
"""
type OETHVault @entity {
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  weth: BigInt!
  stETH: BigInt!
  rETH: BigInt!
  frxETH: BigInt!
}

# OETH Convex: 0x1827F9eA98E0bf96550b2FC20F7233277FcD7E63
# Curve LP Token: 0x94B17476A93b3262d87B9a326965D1E91f9c13E7
# Convex Deposit: 0xF403C135812408BFbE8713b5A23a04b3D48AAE31
type OETHCurveLP @entity {
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  totalSupply: BigInt!
  eth: BigInt!
  oeth: BigInt!
  totalSupplyOwned: BigInt!
  ethOwned: BigInt!
  oethOwned: BigInt!
}

# OETH Frax Staking: 0x3fF8654D633D4Ea0faE24c52Aec73B4A20D0d0e5
type OETHFraxStaking @entity {
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  """
  - sfrxETH is what's actually stored here, slightly confusing and may want to change.
  - used by balance sheet
  """
  sfrxETH: BigInt!
}

# OETH Morpho Aave: 0xc1fc9E5eC3058921eA5025D703CBE31764756319
type OETHMorphoAave @entity {
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  weth: BigInt!
}

# OETH Dripper: 0xc0F42F73b8f01849a2DD99753524d4ba14317EB3
type OETHDripper @entity {
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  weth: BigInt!
  lastCollectTimestamp: Int!
  dripRatePerBlock: BigInt!
  dripDuration: BigInt!
}

# OETHBalancerMetaPoolStrategy: 0x49109629ac1deb03f2e9b2fe2ac4a623e0e7dfdc
type OETHBalancerMetaPoolStrategy @entity {
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  rETH: BigInt!
  weth: BigInt!
}

type OETHDailyStat @entity {
  id: ID!
  """
  Timestamp, eg 2023-10-17
  """
  blockNumber: Int! @index
  """
  Last block number stats were updated
  """
  timestamp: DateTime! @index
  """
  Timestamp of block number stats were updated
  """
  apr: Float!
  apy: Float!
  apy7DayAvg: Float!
  apy14DayAvg: Float!
  apy30DayAvg: Float!

  totalSupply: BigInt!
  totalSupplyUSD: Float!
  rebasingSupply: BigInt!
  nonRebasingSupply: BigInt!
  amoSupply: BigInt!
  dripperWETH: BigInt!
  wrappedSupply: BigInt!
  tradingVolumeUSD: Float!

  yieldETH: BigInt!
  yieldETH7Day: BigInt!
  yieldETHAllTime: BigInt!

  yieldUSD: BigInt!
  yieldUSD7Day: BigInt!
  yieldUSDAllTime: BigInt!

  feesETH: BigInt!
  feesETH7Day: BigInt!
  feesETHAllTime: BigInt!

  feesUSD: BigInt!
  feesUSD7Day: BigInt!
  feesUSDAllTime: BigInt!

  pegPrice: BigInt!
  marketCapUSD: Float!
  holdersOverThreshold: Int!
  strategies: [OETHStrategyDailyStat] @derivedFrom(field: "dailyStatId")
  collateral: [OETHCollateralDailyStat] @derivedFrom(field: "dailyStatId")
}

type OETHStrategyDailyStat @entity {
  id: ID!
  dailyStatId: OETHDailyStat!
  name: String!
  total: BigInt!
  """
  Sum of tokens in strategy
  """
  tvl: BigInt!
  """
  Total ETH value
  """
  holdings: [OETHStrategyHoldingDailyStat]
  @derivedFrom(field: "strategyDailyStatId")
}

type OETHStrategyHoldingDailyStat @entity {
  id: ID!
  strategyDailyStatId: OETHStrategyDailyStat!
  """
  Token symbol
  """
  symbol: String!

  """
  Amount held
  """
  amount: BigInt!

  """
  Total ETH value
  """
  value: BigInt!
}

type OETHCollateralDailyStat @entity {
  id: ID!
  dailyStatId: OETHDailyStat! @index
  symbol: String!
  amount: BigInt!
  price: BigInt!
  value: BigInt!
}

type OETHRewardTokenCollected @entity {
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  strategy: String!
  recipient: String!
  rewardToken: String!
  amount: BigInt!
}type OGN @entity {
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  circulating: BigInt!
  staked: BigInt!
  total: BigInt!
}

type OGNAddress @entity {
  id: ID! @index
  balance: BigInt!
  staked: BigInt!
  xognBalance: BigInt!
  votingPower: BigInt!
  delegatee: OGNAddress
  lastUpdated: DateTime!
}

enum OGNLockupEventType {
  Staked
  Unstaked
  Extended
}

type OGNLockupTxLog @entity {
  id: ID!
  hash: String!
  event: OGNLockupEventType!
  timestamp: DateTime!
  blockNumber: Int!
  totalSupply: BigInt!
  ognLockup: OGNLockup!
}

type OGNLockup @entity {
  id: ID!
  lockupId: String! @index
  address: OGNAddress! @index
  logs: [OGNLockupTxLog]! @derivedFrom(field: "ognLockup")
  amount: BigInt!
  end: DateTime!
  xogn: BigInt! # Amount of xogn received
  timestamp: DateTime!
  # active: Boolean
}

enum OGNProposalState {
  Pending
  Active
  Canceled
  Defeated
  Succeeded
  Queued
  Expired
  Executed
}

enum OGNProposalEvent {
  Created
  Queued
  Canceled
  Extended
  Executed
}

enum OGNVoteType {
  Against
  For
  Abstain
}

type OGNProposalTxLog @entity {
  id: ID!
  hash: String!
  event: OGNProposalEvent!
  timestamp: DateTime!
  proposal: OGNProposal! @index
}

type OGNProposal @entity {
  id: ID! @index
  description: String
  proposer: OGNAddress!
  timestamp: DateTime!
  startBlock: BigInt!
  endBlock: BigInt!
  lastUpdated: DateTime!
  status: OGNProposalState!
  logs: [OGNProposalTxLog]! @derivedFrom(field: "proposal")
  quorum: BigInt!
  choices: [String]!
  scores: [String]!
}

type OGNProposalVote @entity {
  id: ID!
  proposal: OGNProposal! @index
  voter: OGNAddress! @index
  weight: BigInt!
  type: OGNVoteType!
  txHash: String!
  timestamp: DateTime!
}

type OGNDailyStat @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  totalSupply: BigInt!
  totalSupplyUSD: Float!
  totalStaked: BigInt!
  tradingVolumeUSD: Float!
  marketCapUSD: Float!
  priceUSD: Float!
  holdersOverThreshold: Int!
}
type OGV @entity {
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  circulating: BigInt!
  staked: BigInt!
  total: BigInt!
}

type OGVAddress @entity {
  id: ID! @index
  balance: BigInt!
  staked: BigInt!
  veogvBalance: BigInt!
  votingPower: BigInt!
  delegatee: OGVAddress
  lastUpdated: DateTime!
}

enum OGVLockupEventType {
  Staked
  Unstaked
  Extended
}

type OGVLockupTxLog @entity {
  id: ID!
  hash: String!
  event: OGVLockupEventType!
  timestamp: DateTime!
  blockNumber: Int!
  totalSupply: BigInt!
  ogvLockup: OGVLockup!
}

type OGVLockup @entity {
  id: ID!
  lockupId: String! @index
  address: OGVAddress! @index
  logs: [OGVLockupTxLog]! @derivedFrom(field: "ogvLockup")
  amount: BigInt!
  end: DateTime!
  veogv: BigInt! # Amount of veOGV received
  timestamp: DateTime!
  # active: Boolean
}

enum OGVProposalState {
  Pending
  Active
  Canceled
  Defeated
  Succeeded
  Queued
  Expired
  Executed
}

enum OGVProposalEvent {
  Created
  Queued
  Canceled
  Extended
  Executed
}

enum OGVVoteType {
  Against
  For
  Abstain
}

type OGVProposalTxLog @entity {
  id: ID!
  hash: String!
  event: OGVProposalEvent!
  timestamp: DateTime!
  proposal: OGVProposal! @index
}

type OGVProposal @entity {
  id: ID! @index
  description: String
  proposer: OGVAddress!
  timestamp: DateTime!
  startBlock: BigInt!
  endBlock: BigInt!
  lastUpdated: DateTime!
  status: OGVProposalState!
  logs: [OGVProposalTxLog]! @derivedFrom(field: "proposal")
  quorum: BigInt!
  choices: [String]!
  scores: [String]!
}

type OGVProposalVote @entity {
  id: ID!
  proposal: OGVProposal! @index
  voter: OGVAddress! @index
  weight: BigInt!
  type: OGVVoteType!
  txHash: String!
  timestamp: DateTime!
}

type OGVDailyStat @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index

  totalSupply: BigInt!
  totalSupplyUSD: Float!
  totalStaked: BigInt!
  tradingVolumeUSD: Float!
  marketCapUSD: Float!
  priceUSD: Float!
  holdersOverThreshold: Int!
}
type OToken @entity {
  id: ID! @index
  chainId: Int! @index
  otoken: String! @index
  timestamp: DateTime! @index
  blockNumber: Int! @index
  totalSupply: BigInt!
  rebasingSupply: BigInt!
  nonRebasingSupply: BigInt!
}

type OTokenAsset @entity {
  id: ID! @index
  chainId: Int! @index
  otoken: String! @index
  address: String! @index
  symbol: String!
}

type OTokenAddress @entity {
  id: ID! @index
  chainId: Int! @index
  otoken: String! @index
  address: String! @index
  isContract: Boolean!
  rebasingOption: RebasingOption!
  balance: BigInt!
  earned: BigInt!
  credits: BigInt!
  lastUpdated: DateTime!
  history: [OTokenHistory!]! @derivedFrom(field: "address")
}

type OTokenHistory @entity {
  id: ID!
  chainId: Int! @index
  otoken: String! @index
  address: OTokenAddress! @index
  value: BigInt!
  balance: BigInt!
  timestamp: DateTime!
  blockNumber: Int! @index
  txHash: String! @index
  type: HistoryType!
}

type OTokenRebase @entity {
  id: ID!
  chainId: Int! @index
  otoken: String! @index
  timestamp: DateTime! @index
  blockNumber: Int! @index
  txHash: String! @index
  totalSupply: BigInt!
  rebasingCredits: BigInt!
  rebasingCreditsPerToken: BigInt!
  apy: OTokenAPY!
  feeETH: BigInt!
  feeUSD: BigInt!
  yieldETH: BigInt!
  yieldUSD: BigInt!
}

type OTokenRebaseOption @entity {
  id: ID!
  chainId: Int! @index
  otoken: String! @index
  timestamp: DateTime! @index
  blockNumber: Int! @index
  txHash: String! @index
  address: OTokenAddress!
  status: RebasingOption!
}

type OTokenAPY @entity {
  id: ID!
  chainId: Int! @index
  otoken: String! @index
  timestamp: DateTime! @index
  blockNumber: Int! @index
  txHash: String! @index
  date: String! @index
  apr: Float!
  apy: Float!
  apy7DayAvg: Float!
  apy14DayAvg: Float!
  apy30DayAvg: Float!
  rebasingCreditsPerToken: BigInt!
}

type OTokenVault @entity {
  id: ID!
  chainId: Int! @index
  otoken: String! @index
  timestamp: DateTime! @index
  blockNumber: Int! @index
  address: String! @index
  totalValue: BigInt!
}

type OTokenActivity @entity {
  id: ID!
  chainId: Int! @index
  otoken: String! @index
  timestamp: DateTime! @index
  blockNumber: Int! @index
  txHash: String! @index
  callDataLast4Bytes: String!
  address: String
  sighash: String

  action: String
  exchange: String
  interface: String

  fromSymbol: String
  toSymbol: String
  amount: BigInt
}
"""
The Vault entity tracks the OUSD vault balance over time.
"""
type OUSDVault @entity {
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  dai: BigInt!
  usdt: BigInt!
  usdc: BigInt!
}

# OUSD Strategies!

type OUSDMorphoAave @entity {
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  dai: BigInt!
  usdt: BigInt!
  usdc: BigInt!
}

type OUSDMorphoCompound @entity {
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  dai: BigInt!
  usdt: BigInt!
  usdc: BigInt!
}

type MakerDSRStrategy @entity {
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  dai: BigInt!
}

type OUSDFluxStrategy @entity {
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  dai: BigInt!
  usdt: BigInt!
  usdc: BigInt!
}

type OUSDCompoundStrategy @entity {
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  dai: BigInt!
  usdt: BigInt!
  usdc: BigInt!
}

type OUSDConvexStrategy @entity {
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  dai: BigInt!
  usdt: BigInt!
  usdc: BigInt!
}

type OUSDAaveStrategy @entity {
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  dai: BigInt!
  usdt: BigInt!
  usdc: BigInt!
}

type OUSDMetaStrategy @entity {
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  dai: BigInt!
  usdt: BigInt!
  usdc: BigInt!
}

type OUSDConvexLUSDPlus3Crv @entity {
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  dai: BigInt!
  usdt: BigInt!
  usdc: BigInt!
}

type OUSDDailyStat @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  apr: Float!
  apy: Float!
  apy7DayAvg: Float!
  apy14DayAvg: Float!
  apy30DayAvg: Float!

  totalSupply: BigInt!
  totalSupplyUSD: Float!
  rebasingSupply: BigInt!
  nonRebasingSupply: BigInt!
  amoSupply: BigInt!
  dripperWETH: BigInt!
  wrappedSupply: BigInt!
  tradingVolumeUSD: Float!

  yieldETH: BigInt!
  yieldETH7Day: BigInt!
  yieldETHAllTime: BigInt!

  yieldUSD: BigInt!
  yieldUSD7Day: BigInt!
  yieldUSDAllTime: BigInt!

  feesETH: BigInt!
  feesETH7Day: BigInt!
  feesETHAllTime: BigInt!

  feesUSD: BigInt!
  feesUSD7Day: BigInt!
  feesUSDAllTime: BigInt!

  pegPrice: BigInt!
  marketCapUSD: Float!
  holdersOverThreshold: Int!
  strategies: [OUSDStrategyDailyStat] @derivedFrom(field: "dailyStatId")
  collateral: [OUSDCollateralDailyStat] @derivedFrom(field: "dailyStatId")
}

type OUSDStrategyDailyStat @entity {
  id: ID!
  dailyStatId: OUSDDailyStat!
  name: String!
  total: BigInt!
  tvl: BigInt!
  holdings: [OUSDStrategyHoldingDailyStat]
  @derivedFrom(field: "strategyDailyStatId")
}

type OUSDStrategyHoldingDailyStat @entity {
  id: ID!
  strategyDailyStatId: OUSDStrategyDailyStat!
  symbol: String!
  amount: BigInt!
  value: BigInt!
}

type OUSDCollateralDailyStat @entity {
  id: ID!
  dailyStatId: OUSDDailyStat! @index
  symbol: String!
  amount: BigInt!
  price: BigInt!
  value: BigInt!
}
