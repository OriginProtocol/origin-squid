type ProcessingStatus @entity {
  id: ID!
  timestamp: DateTime!
  blockNumber: Int!
}

type TransactionDetails @entity {
  id: ID!
  chainId: Int! @index
  txHash: String! @index
  timestamp: DateTime! @index
  blockNumber: Int! @index
  from: String! @index
  to: String! @index
  gasUsed: BigInt!
  effectiveGasPrice: BigInt!
  transactionFee: BigInt!
}

"""
Any entity which has a price associated with it should have that price go in here.
Prices can change very frequently and we don't want those changes on the same track
as values which change less frequently.
"""
type ExchangeRate @entity {
  """
  Format: 'chainId:blockNumber:pair' ex '1:123456789:ETH_USD'
  """
  id: ID!
  chainId: Int! @index
  timestamp: DateTime! @index
  blockNumber: Int! @index
  pair: String!
  base: String!
  quote: String!
  rate: BigInt!
}

enum HistoryType {
  Sent
  Received
  Yield
}

type StrategyBalance @entity {
  """
  Format: 'chainId:strategy:asset:blockNumber'
  """
  id: ID!
  chainId: Int! @index
  timestamp: DateTime! @index
  blockNumber: Int! @index
  strategy: String!
  asset: String!
  symbol: String!
  balance: BigInt!
  balanceETH: BigInt!
}

type StrategyYield @entity {
  """
  Format: 'strategy:asset:blockNumber'
  """
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  strategy: String!
  asset: String!
  balance: BigInt!
  balanceWeight: Float!
  earnings: BigInt!
  earningsChange: BigInt!
}

type StrategyDailyYield @entity {
  """
  Format: 'strategy:asset:blockNumber'
  """
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  strategy: String!
  asset: String!
  balance: BigInt!
  balanceWeight: Float!
  earnings: BigInt!
  earningsChange: BigInt!
  apr: Float!
  apy: Float!
}

type NativeBalance @entity {
  """
  Format: 'account:blockNumber'
  """
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  account: String!
  balance: BigInt!
}

type ERC20 @entity {
  id: ID!
  chainId: Int! @index
  address: String! @index
  name: String!
  decimals: Int!
  symbol: String!
}

type ERC20Holder @entity {
  id: ID!
  chainId: Int! @index
  address: String! @index
  account: String! @index
  balance: BigInt!
  rebasingCredits: BigInt # Only used for rebasing tokens
}

type ERC20State @entity {
  id: ID!
  chainId: Int! @index
  timestamp: DateTime! @index
  blockNumber: Int! @index
  address: String!
  totalSupply: BigInt!
  holderCount: Int!
  rebasingCreditsPerToken: BigInt # Only used for rebasing tokens
}

type ERC20Balance @entity {
  id: ID!
  chainId: Int! @index
  timestamp: DateTime! @index
  blockNumber: Int! @index
  address: String! @index
  account: String! @index
  balance: BigInt!
  rebasingCredits: BigInt # Only used for rebasing tokens
}

type ERC20Transfer @entity {
  id: ID!
  chainId: Int! @index
  txHash: String!
  blockNumber: Int!
  timestamp: DateTime!
  address: String! @index
  from: String! @index
  fromBalance: BigInt!
  to: String! @index
  toBalance: BigInt!
  value: BigInt!
}

type CurvePool @entity {
  id: ID!
  address: String! @index
  name: String!
  tokenCount: Int!
  token0: String!
  token1: String!
  token2: String
}

type CurvePoolBalance @entity {
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  address: String!
  balance0: BigInt!
  balance1: BigInt!
  balance2: BigInt!
}

type CurvePoolRate @entity {
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  address: String!
  name: String!
  rate: BigInt!
}

type BalancerPool @entity {
  id: ID!
  address: String! @index
  name: String!
  tokenCount: Int!
  token0: String!
  token1: String!
  token2: String
  token3: String
}

type BalancerPoolBalance @entity {
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  address: String!
  balance0: BigInt!
  balance1: BigInt!
  balance2: BigInt!
  balance3: BigInt!
}

type BalancerPoolRate @entity {
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  address: String!
  rate0: BigInt!
  rate1: BigInt!
  rate2: BigInt!
  rate3: BigInt!
}

type MaverickPool @entity {
  id: ID!
  address: String! @index
  name: String!
  tokenA: String!
  tokenB: String!
}

type MaverickPoolBalance @entity {
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  address: String!
  binBalanceA: BigInt!
  binBalanceB: BigInt!
}

enum LiquiditySourceType {
  CurvePool
  BalancerPool
  MaverickPool
  UniswapPool
  Aave
  Compound
}

type LiquiditySource @entity {
  id: ID!
  address: String!
  type: LiquiditySourceType!
  token: String!
}

type LiquidityDailyBalance @entity {
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  address: String!
  token: String!
  balance: BigInt!
}

type BridgeTransfer @entity {
  id: ID! # chain + log id
  timestamp: DateTime! @index
  blockNumber: Int! @index
  txHashIn: String!
  txHashOut: String # Initially null
  messageId: String! @index
  bridge: String! @index
  transactor: String! @index
  sender: String! @index
  receiver: String! @index
  chainIn: Int! @index
  chainOut: Int!
  tokenIn: String!
  tokenOut: String!
  amountIn: BigInt!
  amountOut: BigInt!
  state: Int!
}

type BridgeTransferState @entity {
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  txHash: String! @index
  state: Int!
}
