type ProcessingStatus @entity {
  id: ID!
  timestamp: DateTime!
  blockNumber: Int!
}

"""
Any entity which has a price associated with it should have that price go in here.
Prices can change very frequently and we don't want those changes on the same track
as values which change less frequently.
"""
type ExchangeRate @entity {
  """
  Format: 'blockNumber:pair' ex '123456789:ETH_USD'
  """
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  pair: String!
  base: String!
  quote: String!
  rate: BigInt!
}

enum RebasingOption {
  OptIn
  OptOut
}

enum HistoryType {
  Swap
  Sent
  Received
  Yield
}

type StrategyBalance @entity {
  """
  Format: 'strategy:asset:blockNumber'
  """
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  strategy: String!
  asset: String!
  balance: BigInt!
}

type StrategyYield @entity {
  """
  Format: 'strategy:asset:blockNumber'
  """
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  strategy: String!
  asset: String!
  balance: BigInt!
  balanceWeight: Float!
  earnings: BigInt!
  earningsChange: BigInt!
}

type StrategyDailyYield @entity {
  """
  Format: 'strategy:asset:blockNumber'
  """
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  strategy: String!
  asset: String!
  balance: BigInt!
  balanceWeight: Float!
  earnings: BigInt!
  earningsChange: BigInt!
  apr: Float!
  apy: Float!
}

type NativeBalance @entity {
  """
  Format: 'account:blockNumber'
  """
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  account: String!
  balance: BigInt!
}

type ERC20 @entity {
  """
  Format: 'address'
  """
  id: ID!
  address: String!
  name: String!
  decimals: Int!
  symbol: String!
}

type ERC20Holder @entity {
  """
  Format: 'address:account'
  """
  id: ID!
  address: String!
  account: String!
}

type ERC20State @entity {
  """
  Format: 'address:blockNumber'
  """
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  address: String!
  totalSupply: BigInt!
  holderCount: Int!
}

type ERC20Balance @entity {
  """
  Format: 'address:account:blockNumber'
  """
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  address: String!
  account: String!
  balance: BigInt!
}

type CurvePool @entity {
  id: ID!
  address: String! @index
  name: String!
  tokenCount: Int!
  token0: String!
  token1: String!
  token2: String
}

type CurvePoolBalance @entity {
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  address: String!
  balance0: BigInt!
  balance1: BigInt!
  balance2: BigInt!
}

type CurvePoolRate @entity {
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  address: String!
  name: String!
  rate: BigInt!
}

type BalancerPool @entity {
  id: ID!
  address: String! @index
  name: String!
  tokenCount: Int!
  token0: String!
  token1: String!
  token2: String
  token3: String
}

type BalancerPoolBalance @entity {
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  address: String!
  balance0: BigInt!
  balance1: BigInt!
  balance2: BigInt!
  balance3: BigInt!
}

type BalancerPoolRate @entity {
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  address: String!
  rate0: BigInt!
  rate1: BigInt!
  rate2: BigInt!
  rate3: BigInt!
}

type MaverickPool @entity {
  id: ID!
  address: String! @index
  name: String!
  tokenA: String!
  tokenB: String!
}

type MaverickPoolBalance @entity {
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  address: String!
  binBalanceA: BigInt!
  binBalanceB: BigInt!
}

enum LiquiditySourceType {
  CurvePool
  BalancerPool
  MaverickPool
  UniswapPool
  Aave
  Compound
}

type LiquiditySource @entity {
  id: ID!
  address: String!
  type: LiquiditySourceType!
  token: String!
}

type LiquidityDailyBalance @entity {
  id: ID!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  address: String!
  token: String!
  balance: BigInt!
}

type BridgeTransfer @entity {
  id: ID! # chain + log id
  timestamp: DateTime! @index
  blockNumber: Int! @index
  txHash: String! @index
  messageId: String! @index
  bridge: String! @index
  sender: String! @index
  receiver: String! @index
  chainIn: Int! @index
  chainOut: Int!
  tokenIn: String!
  tokenOut: String!
  amountIn: BigInt!
  amountOut: BigInt!
}

type BridgeTransferState @entity {
  id: ID!
  state: Int!
}